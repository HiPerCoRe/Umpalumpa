name: CMake

on:
  push:
    branches: [ master, devel ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - uses: Jimver/cuda-toolkit@v0.2.8
      id: cuda-toolkit
      with:
        cuda: '11.4.3'
        linux-local-args: '[ "--toolkit" ]'
    - run: echo "Installed cuda version is:${{steps.cuda-toolkit.outputs.cuda}}"

    - name: Install dependencies
      run: sudo apt-get install -y libfftw3-dev
    
    # since no driver is installed, the runtime libraries and includes are located elsewhere
    - name: Add Cuda stubs
      run: echo "LD_LIBRARY_PATH=$CUDA_PATH/lib64/stubs:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DUSE_STARPU=OFF -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: find cuda
      run: find / -iname cuda_runtime.h*

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
