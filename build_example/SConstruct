import os

# CONSTANTS
STARPU_VERSION='1.3'
STARPU_LIB='starpu-' + STARPU_VERSION

CUDA_VERSION='11.2'
CUDA_LIB='cuda-' + CUDA_VERSION

# ERRORS
ERR_DEPENDENCY_NOT_FOUND=-1

def ensure_starpu(env, config):
    STARPU_PATH='STARPU_PATH'
    PKG_CONFIG_PATH='PKG_CONFIG_PATH'
    if not config.PkgConfigCheck(STARPU_LIB):
        if not os.getenv(STARPU_PATH):
            print(F'Try to set {STARPU_PATH} or set {PKG_CONFIG_PATH}')
            return False
        else:
            print(f'Adding {STARPU_PATH} to {PKG_CONFIG_PATH}...')
            p = os.path.join(os.getenv(STARPU_PATH), 'lib', 'pkgconfig')
            env.AppendENVPath(PKG_CONFIG_PATH, p)
            return config.PkgConfigCheck(STARPU_LIB)
    return True

def ensure_cuda():
    if not config.PkgConfigCheck(CUDA_LIB):
        print(f'{CUDA_LIB} not found. Default action not implemented yet. Please contact developers')
        return False
    return True


def config_starpu(env):
    print('Using StarPU flags...')
    env.ParseConfig(f'pkg-config --cflags --libs {STARPU_LIB}')

def config_cuda(env, config):
    root = Execute(f'pkg-config --variable=cudaroot {CUDA_LIB}')
    print(f'->{root}<-')
    import inspect
    print(inspect.getsource(Execute))

env = Environment() #  start with default environment
env.Tool('scons-pkg-config', toolpath=['external']) # add pkg-config tool
config = env.Configure()


has_dependencies = ensure_starpu(env, config) and ensure_cuda()
if not has_dependencies:
    print(f'Cannot continue')
    exit(ERR_DEPENDENCY_NOT_FOUND)
    
config_starpu(env)
config_cuda(env, config)





# ask other scripts what shoould be build
# duplicate=0 to avoid copy of the src files
SConscript('libumpalumpa/SConscript', variant_dir='build', duplicate=0, exports='env')

